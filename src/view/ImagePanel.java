/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;

/**
 * Image panel Class
 */
public class ImagePanel extends javax.swing.JPanel {
    private BufferedImage image;
    
    /**
     * Creates new form ImagePanel
     */
    public ImagePanel() {
        /* Initialize components */
        image = null;
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Paint image.
     * @param g Graphics.
     */
    @Override
    protected void paintComponent(java.awt.Graphics g)
    {
        super.paintComponent(g);

        Rectangle geometry = new Rectangle();
        if (image != null) {
            geometry.setBounds(0, 0, image.getWidth(), image.getHeight());
            
            /* Zoom */
            double zoom = Math.min(Math.min((double) getWidth() / (double) geometry.width, (double) getHeight() / (double) geometry.height), 1.0);
            geometry.width *= zoom;
            geometry.height *= zoom;

            /* Center */
            geometry.x = (getWidth() < geometry.width ? 0 : (getWidth() - geometry.width) >> 1);
            geometry.y = (getHeight() < geometry.height ? 0 : (getHeight() - geometry.height) >> 1);
        }

        g.drawImage(image, geometry.x, geometry.y, geometry.width, geometry.height, this);
    }
    
    /**
     * Set new image to paint.
     * @param newImage New buffered image.
     */
    public void setImage(BufferedImage newImage) {
        image = newImage;
        
        /* Refresh */
        revalidate();
        repaint();
    }
    
    /**
     * Get current image.
     * @return Current buffed,
     */
    public BufferedImage getImage() {
        return image;
    }
    
    /**
     * Validate image.
     * @return True if has a loaded image.
     */
    public boolean hasImage() {
        return image != null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
