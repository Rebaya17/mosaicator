/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import javax.swing.event.ChangeEvent;
import java.awt.event.ActionEvent;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import java.awt.Dimension;
import java.awt.Component;
import java.awt.Container;

import javax.swing.SpinnerNumberModel;
import javax.swing.DefaultBoundedRangeModel;

import java.awt.image.BufferedImage;

import controller.Controller;
import model.Metadata;

/**
 * Main window class.
 */
public class MainWindow extends javax.swing.JFrame {
    private Metadata metadata;
    
    public static final int RGB = 0;
    public static final int CIELAB = 1;
    
    public static final int SAMPLING_BY_LEVEL = 0;
    public static final int SAMPLING_TOTAL = 1;
    
    /**
     * Creates new form MainWindow.
     */
    public MainWindow() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc="Look and feel setting code">
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e)
        {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
        //</editor-fold>
        
        /* Initialize and setup components */
        metadata = null;
        initComponents();
        setupComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        samplingType = new javax.swing.ButtonGroup();
        colorSpace = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        frameTab = new javax.swing.JPanel();
        videoPanel = new javax.swing.JPanel();
        videoNameLabel = new javax.swing.JLabel();
        videoNameValue = new javax.swing.JTextField();
        videoPathLabel = new javax.swing.JLabel();
        videoPathValue = new javax.swing.JTextField();
        videoSizeLabel = new javax.swing.JLabel();
        videoSizeValue = new javax.swing.JTextField();
        videoFormatLabel = new javax.swing.JLabel();
        videoFormatValue = new javax.swing.JTextField();
        videoWidthLabel = new javax.swing.JLabel();
        videoWidthValue = new javax.swing.JTextField();
        videoHeightLabel = new javax.swing.JLabel();
        videoHeightValue = new javax.swing.JTextField();
        videoLengthLabel = new javax.swing.JLabel();
        videoLengthValue = new javax.swing.JTextField();
        videoFramesLabel = new javax.swing.JLabel();
        videoFramesValue = new javax.swing.JTextField();
        videoFpsLabel = new javax.swing.JLabel();
        videoFpsValue = new javax.swing.JTextField();
        openVideo = new javax.swing.JButton();
        exportFrameButton = new javax.swing.JButton();
        frameSelectorPanel = new javax.swing.JPanel();
        hourLabel = new javax.swing.JLabel();
        hourValue = new javax.swing.JSpinner();
        colon1 = new javax.swing.JLabel();
        minuteValue = new javax.swing.JSpinner();
        colon2 = new javax.swing.JLabel();
        secondValue = new javax.swing.JSpinner();
        colon3 = new javax.swing.JLabel();
        milisecondValue = new javax.swing.JSpinner();
        frameLabel = new javax.swing.JLabel();
        frameValue = new javax.swing.JSpinner();
        frameSlider = new javax.swing.JSlider();
        frame = new view.ImagePanel();
        mosaicTab = new javax.swing.JPanel();
        mosaicPanel = new javax.swing.JPanel();
        divisionsLabel = new javax.swing.JLabel();
        divisionsValue = new javax.swing.JSpinner();
        gapLabel = new javax.swing.JLabel();
        gapValue = new javax.swing.JSpinner();
        colorSpaceLabel = new javax.swing.JLabel();
        colorRGB = new javax.swing.JRadioButton();
        colorCIELAB = new javax.swing.JRadioButton();
        samplingTypeLabel = new javax.swing.JLabel();
        samplingByLevel = new javax.swing.JRadioButton();
        samplingTotal = new javax.swing.JRadioButton();
        samplingLevelLabel = new javax.swing.JLabel();
        samplingLevelValue = new javax.swing.JSpinner();
        scaleLabel = new javax.swing.JLabel();
        scaleValue = new javax.swing.JSpinner();
        mosaicWidthLabel = new javax.swing.JLabel();
        mosaicWidthValue = new javax.swing.JSpinner();
        mosaicHeightLabel = new javax.swing.JLabel();
        mosaicHeightValue = new javax.swing.JSpinner();
        generate = new javax.swing.JButton();
        exportMosaicButton = new javax.swing.JButton();
        mosaic = new view.ImagePanel();
        piecesTab = new javax.swing.JPanel();
        piecesPanel = new javax.swing.JPanel();
        piecesLabel = new javax.swing.JLabel();
        piecesValue = new javax.swing.JTextField();
        exportPiecesButton = new javax.swing.JButton();
        piecesScroll = new javax.swing.JScrollPane();
        piecesViewport = new javax.swing.JPanel();
        piecesCanvas = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JPopupMenu.Separator();
        exportFrameMenu = new javax.swing.JMenuItem();
        exportMosaicMenu = new javax.swing.JMenuItem();
        exportPiecesMenu = new javax.swing.JMenuItem();
        separator3 = new javax.swing.JPopupMenu.Separator();
        close = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mosaicator");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/resources/icon.png")).getImage());
        setMinimumSize(new java.awt.Dimension(640, 400));
        setName("mainWindow"); // NOI18N

        tabbedPane.setName("tabbedPane"); // NOI18N

        frameTab.setName("frameTab"); // NOI18N

        videoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Video"));
        videoPanel.setName("videoPanel"); // NOI18N
        videoPanel.setPreferredSize(new java.awt.Dimension(200, 277));

        videoNameLabel.setText("Nombre:");
        videoNameLabel.setName("videoNameLabel"); // NOI18N

        videoNameValue.setEditable(false);
        videoNameValue.setBorder(null);
        videoNameValue.setName("videoNameValue"); // NOI18N

        videoPathLabel.setText("Ubicación:");
        videoPathLabel.setName("videoPathLabel"); // NOI18N

        videoPathValue.setEditable(false);
        videoPathValue.setBorder(null);
        videoPathValue.setName("videoPathValue"); // NOI18N

        videoSizeLabel.setText("Tamaño:");
        videoSizeLabel.setName("videoSizeLabel"); // NOI18N

        videoSizeValue.setEditable(false);
        videoSizeValue.setBorder(null);
        videoSizeValue.setName("videoSizeValue"); // NOI18N

        videoFormatLabel.setText("Formatos:");
        videoFormatLabel.setName("videoFormatLabel"); // NOI18N

        videoFormatValue.setEditable(false);
        videoFormatValue.setBorder(null);
        videoFormatValue.setName("videoFormatValue"); // NOI18N

        videoWidthLabel.setText("Ancho:");
        videoWidthLabel.setName("videoWidthLabel"); // NOI18N

        videoWidthValue.setEditable(false);
        videoWidthValue.setBorder(null);
        videoWidthValue.setName("videoWidthValue"); // NOI18N

        videoHeightLabel.setText("Alto:");
        videoHeightLabel.setName("videoHeightLabel"); // NOI18N

        videoHeightValue.setEditable(false);
        videoHeightValue.setBorder(null);
        videoHeightValue.setName("videoHeightValue"); // NOI18N

        videoLengthLabel.setText("Duración:");
        videoLengthLabel.setName("videoLengthLabel"); // NOI18N

        videoLengthValue.setEditable(false);
        videoLengthValue.setToolTipText("HH:MM:SS,MS");
        videoLengthValue.setBorder(null);
        videoLengthValue.setName("videoLengthValue"); // NOI18N

        videoFramesLabel.setText("Cuadros:");
        videoFramesLabel.setName("videoFramesLabel"); // NOI18N

        videoFramesValue.setEditable(false);
        videoFramesValue.setBorder(null);
        videoFramesValue.setName("pathValue"); // NOI18N

        videoFpsLabel.setText("Tasa de cuadros:");
        videoFpsLabel.setName("videoFpsLabel"); // NOI18N

        videoFpsValue.setEditable(false);
        videoFpsValue.setBorder(null);
        videoFpsValue.setName("videoFpsValue"); // NOI18N

        openVideo.setMnemonic('A');
        openVideo.setText("Abrir...");
        openVideo.setName("openVideo"); // NOI18N

        exportFrameButton.setMnemonic('E');
        exportFrameButton.setText("Exportar...");
        exportFrameButton.setName("exportFrameButton"); // NOI18N

        javax.swing.GroupLayout videoPanelLayout = new javax.swing.GroupLayout(videoPanel);
        videoPanel.setLayout(videoPanelLayout);
        videoPanelLayout.setHorizontalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(videoPanelLayout.createSequentialGroup()
                        .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(videoPathLabel)
                            .addComponent(videoSizeLabel)
                            .addComponent(videoNameLabel)
                            .addComponent(videoFormatLabel)
                            .addComponent(videoWidthLabel)
                            .addComponent(videoHeightLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(videoHeightValue)
                            .addComponent(videoWidthValue)
                            .addComponent(videoFormatValue)
                            .addComponent(videoNameValue)
                            .addComponent(videoSizeValue)
                            .addComponent(videoPathValue)))
                    .addGroup(videoPanelLayout.createSequentialGroup()
                        .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(videoFpsLabel)
                            .addComponent(videoFramesLabel)
                            .addComponent(videoLengthLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(videoLengthValue, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(videoFramesValue)
                            .addComponent(videoFpsValue))))
                .addContainerGap())
            .addGroup(videoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(openVideo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportFrameButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        videoPanelLayout.setVerticalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(videoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoNameLabel)
                    .addComponent(videoNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoPathLabel)
                    .addComponent(videoPathValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoSizeLabel)
                    .addComponent(videoSizeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoFormatLabel)
                    .addComponent(videoFormatValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoWidthLabel)
                    .addComponent(videoWidthValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoHeightLabel)
                    .addComponent(videoHeightValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoLengthLabel)
                    .addComponent(videoLengthValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoFramesLabel)
                    .addComponent(videoFramesValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoFpsLabel)
                    .addComponent(videoFpsValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openVideo)
                    .addComponent(exportFrameButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        frameSelectorPanel.setMinimumSize(new java.awt.Dimension(398, 74));
        frameSelectorPanel.setName("frameSelectorPanel"); // NOI18N

        hourLabel.setText("Tiempo:");
        hourLabel.setToolTipText("HH:MM:SS:MS");
        hourLabel.setName("hourLabel"); // NOI18N

        hourValue.setToolTipText("Horas");
        hourValue.setName("hourValue"); // NOI18N

        colon1.setText(":");
        colon1.setToolTipText("");
        colon1.setName("colon1"); // NOI18N

        minuteValue.setToolTipText("Minutos");
        minuteValue.setName("minuteValue"); // NOI18N

        colon2.setText(":");
        colon2.setName("colon2"); // NOI18N

        secondValue.setToolTipText("Segundos");
        secondValue.setName("secondValue"); // NOI18N

        colon3.setText(":");
        colon3.setName("colon3"); // NOI18N

        milisecondValue.setToolTipText("Milisegundos");
        milisecondValue.setName("milisecondValue"); // NOI18N

        frameLabel.setText("Cuadro:");
        frameLabel.setName("frameLabel"); // NOI18N

        frameValue.setMinimumSize(new java.awt.Dimension(65, 20));
        frameValue.setName("frameValue"); // NOI18N
        frameValue.setPreferredSize(new java.awt.Dimension(65, 20));

        frameSlider.setValue(0);
        frameSlider.setName("frameSlider"); // NOI18N

        javax.swing.GroupLayout frameSelectorPanelLayout = new javax.swing.GroupLayout(frameSelectorPanel);
        frameSelectorPanel.setLayout(frameSelectorPanelLayout);
        frameSelectorPanelLayout.setHorizontalGroup(
            frameSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(frameSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(frameSelectorPanelLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(hourLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hourValue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colon1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minuteValue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colon2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondValue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colon3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(milisecondValue, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(frameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        frameSelectorPanelLayout.setVerticalGroup(
            frameSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameSelectorPanelLayout.createSequentialGroup()
                .addGroup(frameSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourLabel)
                    .addComponent(hourValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colon1)
                    .addComponent(colon2)
                    .addComponent(minuteValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colon3)
                    .addComponent(milisecondValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frameLabel)
                    .addComponent(frameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        frame.setName("frame"); // NOI18N

        javax.swing.GroupLayout frameLayout = new javax.swing.GroupLayout(frame);
        frame.setLayout(frameLayout);
        frameLayout.setHorizontalGroup(
            frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        frameLayout.setVerticalGroup(
            frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout frameTabLayout = new javax.swing.GroupLayout(frameTab);
        frameTab.setLayout(frameTabLayout);
        frameTabLayout.setHorizontalGroup(
            frameTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        frameTabLayout.setVerticalGroup(
            frameTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(videoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addGroup(frameTabLayout.createSequentialGroup()
                        .addComponent(frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(frameSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabbedPane.addTab("Cuadro", frameTab);

        mosaicTab.setName("mosaicTab"); // NOI18N

        mosaicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mosaico"));
        mosaicPanel.setName("mosaicPanel"); // NOI18N
        mosaicPanel.setPreferredSize(new java.awt.Dimension(200, 277));

        divisionsLabel.setText("Divisiones:");
        divisionsLabel.setName("divisionsLabel"); // NOI18N

        divisionsValue.setName("divisionsValue"); // NOI18N

        gapLabel.setText("Período de muestreo:");
        gapLabel.setName("gapLabel"); // NOI18N

        gapValue.setToolTipText("Cuadros");
        gapValue.setName("gapValue"); // NOI18N

        colorSpaceLabel.setText("Espacio de color:");
        colorSpaceLabel.setName("colorSpaceLabel"); // NOI18N

        colorSpace.add(colorRGB);
        colorRGB.setText("RGB");
        colorRGB.setName("colorRGB"); // NOI18N

        colorSpace.add(colorCIELAB);
        colorCIELAB.setText("CIE L*A*B*");
        colorCIELAB.setName("colorCIELAB"); // NOI18N

        samplingTypeLabel.setText("Tipo de muestreo:");
        samplingTypeLabel.setName("samplingTypeLabel"); // NOI18N

        samplingType.add(samplingByLevel);
        samplingByLevel.setMnemonic('n');
        samplingByLevel.setText("Por nivel");
        samplingByLevel.setName("samplingByLevel"); // NOI18N

        samplingType.add(samplingTotal);
        samplingTotal.setMnemonic('T');
        samplingTotal.setText("Total");
        samplingTotal.setName("samplingTotal"); // NOI18N

        samplingLevelLabel.setText("Nivel de muestreo:");
        samplingLevelLabel.setName("samplingLevelLabel"); // NOI18N

        samplingLevelValue.setName("samplingLevelValue"); // NOI18N

        scaleLabel.setText("Escalado:");
        scaleLabel.setName("scaleLabel"); // NOI18N

        scaleValue.setName("scaleValue"); // NOI18N

        mosaicWidthLabel.setText("Ancho:");
        mosaicWidthLabel.setName("mosaicWidthLabel"); // NOI18N

        mosaicWidthValue.setName("mosaicWidthValue"); // NOI18N

        mosaicHeightLabel.setText("Alto:");
        mosaicHeightLabel.setName("mosaicHeightLabel"); // NOI18N

        mosaicHeightValue.setName("mosaicHeightValue"); // NOI18N

        generate.setMnemonic('G');
        generate.setText("Generar");
        generate.setName("generate"); // NOI18N

        exportMosaicButton.setMnemonic('E');
        exportMosaicButton.setText("Exportar...");
        exportMosaicButton.setName("exportMosaicButton"); // NOI18N

        javax.swing.GroupLayout mosaicPanelLayout = new javax.swing.GroupLayout(mosaicPanel);
        mosaicPanel.setLayout(mosaicPanelLayout);
        mosaicPanelLayout.setHorizontalGroup(
            mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mosaicPanelLayout.createSequentialGroup()
                        .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(divisionsLabel)
                            .addComponent(gapLabel)
                            .addComponent(colorSpaceLabel)
                            .addComponent(samplingLevelLabel)
                            .addComponent(scaleLabel)
                            .addComponent(mosaicWidthLabel)
                            .addComponent(mosaicHeightLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(divisionsValue)
                            .addComponent(gapValue)
                            .addComponent(samplingLevelValue)
                            .addComponent(scaleValue)
                            .addComponent(mosaicWidthValue)
                            .addComponent(mosaicHeightValue)))
                    .addGroup(mosaicPanelLayout.createSequentialGroup()
                        .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mosaicPanelLayout.createSequentialGroup()
                                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(samplingByLevel)
                                    .addComponent(colorRGB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorCIELAB)
                                    .addComponent(samplingTotal)))
                            .addComponent(samplingTypeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(mosaicPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(generate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportMosaicButton)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        mosaicPanelLayout.setVerticalGroup(
            mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(divisionsLabel)
                    .addComponent(divisionsValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gapLabel)
                    .addComponent(gapValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorSpaceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorRGB)
                    .addComponent(colorCIELAB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(samplingTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(samplingByLevel)
                    .addComponent(samplingTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(samplingLevelLabel)
                    .addComponent(samplingLevelValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scaleLabel)
                    .addComponent(scaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mosaicWidthLabel)
                    .addComponent(mosaicWidthValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mosaicHeightLabel)
                    .addComponent(mosaicHeightValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mosaicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generate)
                    .addComponent(exportMosaicButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mosaic.setName("mosaic"); // NOI18N

        javax.swing.GroupLayout mosaicLayout = new javax.swing.GroupLayout(mosaic);
        mosaic.setLayout(mosaicLayout);
        mosaicLayout.setHorizontalGroup(
            mosaicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
        );
        mosaicLayout.setVerticalGroup(
            mosaicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mosaicTabLayout = new javax.swing.GroupLayout(mosaicTab);
        mosaicTab.setLayout(mosaicTabLayout);
        mosaicTabLayout.setHorizontalGroup(
            mosaicTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mosaicTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mosaicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mosaic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mosaicTabLayout.setVerticalGroup(
            mosaicTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mosaicTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mosaicTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mosaic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mosaicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Mosaico", mosaicTab);

        piecesTab.setName("piecesTab"); // NOI18N

        piecesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Piezas"));
        piecesPanel.setName("piecesPanel"); // NOI18N
        piecesPanel.setPreferredSize(new java.awt.Dimension(200, 277));

        piecesLabel.setText("Número de piezas:");
        piecesLabel.setName("piecesLabel"); // NOI18N

        piecesValue.setEditable(false);
        piecesValue.setBorder(null);
        piecesValue.setName("piecesValue"); // NOI18N

        exportPiecesButton.setMnemonic('E');
        exportPiecesButton.setText("Exportar...");
        exportPiecesButton.setName("exportPiecesButton"); // NOI18N

        javax.swing.GroupLayout piecesPanelLayout = new javax.swing.GroupLayout(piecesPanel);
        piecesPanel.setLayout(piecesPanelLayout);
        piecesPanelLayout.setHorizontalGroup(
            piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piecesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(piecesValue, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(piecesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportPiecesButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        piecesPanelLayout.setVerticalGroup(
            piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(piecesLabel)
                    .addComponent(piecesValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(exportPiecesButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        piecesScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        piecesScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        piecesScroll.setHorizontalScrollBar(null);
        piecesScroll.setName("piecesScroll"); // NOI18N
        piecesScroll.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                piecesScrollComponentResized(evt);
            }
        });

        piecesViewport.setName("piecesViewport"); // NOI18N

        piecesCanvas.setName("piecesCanvas"); // NOI18N

        javax.swing.GroupLayout piecesCanvasLayout = new javax.swing.GroupLayout(piecesCanvas);
        piecesCanvas.setLayout(piecesCanvasLayout);
        piecesCanvasLayout.setHorizontalGroup(
            piecesCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        piecesCanvasLayout.setVerticalGroup(
            piecesCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout piecesViewportLayout = new javax.swing.GroupLayout(piecesViewport);
        piecesViewport.setLayout(piecesViewportLayout);
        piecesViewportLayout.setHorizontalGroup(
            piecesViewportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesViewportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piecesCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        piecesViewportLayout.setVerticalGroup(
            piecesViewportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesViewportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piecesCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        piecesScroll.setViewportView(piecesViewport);

        javax.swing.GroupLayout piecesTabLayout = new javax.swing.GroupLayout(piecesTab);
        piecesTab.setLayout(piecesTabLayout);
        piecesTabLayout.setHorizontalGroup(
            piecesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piecesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(piecesScroll)
                .addContainerGap())
        );
        piecesTabLayout.setVerticalGroup(
            piecesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, piecesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(piecesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(piecesScroll)
                    .addComponent(piecesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Piezas", piecesTab);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setMnemonic('A');
        fileMenu.setText("Archivo");
        fileMenu.setName("fileMenu"); // NOI18N

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setMnemonic('N');
        newFile.setText("Nuevo...");
        newFile.setName("newFile"); // NOI18N
        fileMenu.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setMnemonic('A');
        openFile.setText("Abrir...");
        openFile.setName("openFile"); // NOI18N
        fileMenu.add(openFile);

        separator1.setName("separator1"); // NOI18N
        fileMenu.add(separator1);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        save.setMnemonic('G');
        save.setText("Guardar");
        save.setName("save"); // NOI18N
        fileMenu.add(save);

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs.setMnemonic('u');
        saveAs.setText("Guardar como...");
        saveAs.setName("saveAs"); // NOI18N
        fileMenu.add(saveAs);

        separator2.setName("separator2"); // NOI18N
        fileMenu.add(separator2);

        exportFrameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exportFrameMenu.setText("Exportar cuadro...");
        exportFrameMenu.setName("exportFrameMenu"); // NOI18N
        fileMenu.add(exportFrameMenu);

        exportMosaicMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exportMosaicMenu.setMnemonic('E');
        exportMosaicMenu.setText("Exportar mosaico...");
        exportMosaicMenu.setName("exportMosaicMenu"); // NOI18N
        fileMenu.add(exportMosaicMenu);

        exportPiecesMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exportPiecesMenu.setMnemonic('P');
        exportPiecesMenu.setText("Exportar piezas...");
        exportPiecesMenu.setName("exportPiecesMenu"); // NOI18N
        fileMenu.add(exportPiecesMenu);

        separator3.setName("separator3"); // NOI18N
        fileMenu.add(separator3);

        close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        close.setMnemonic('C');
        close.setText("Cerrar");
        close.setName("close"); // NOI18N
        fileMenu.add(close);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setMnemonic('S');
        exit.setText("Salir");
        exit.setName("exit"); // NOI18N
        fileMenu.add(exit);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('y');
        helpMenu.setText("Ayuda");
        helpMenu.setName("helpMenu"); // NOI18N

        about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        about.setMnemonic('A');
        about.setText("Acerca de...");
        about.setName("about"); // NOI18N
        helpMenu.add(about);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void piecesScrollComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_piecesScrollComponentResized
        Component[] panels = piecesCanvas.getComponents();
        if (panels.length == 0) return;
        
        float width = (float) (piecesScroll.getWidth() - piecesScroll.getVerticalScrollBar().getWidth() - 40)  / 3.0F;
        float scale = width / (float) ((ImagePanel) panels[0]).getImage().getWidth();
        Dimension size = new Dimension((int) width, (int) (((ImagePanel) panels[0]).getImage().getHeight() * scale));
        
        for (Component panel : panels) {
            panel.setPreferredSize(size);
            panel.setSize(size);
        }
    }//GEN-LAST:event_piecesScrollComponentResized

    /**
     * Update the selected frame number from time scale.
     */
    // <editor-fold defaultstate="collapsed" desc="Update the selected frame number from time scale">
    private void updateFrameNumber() {
        /* Read values */
        long hour = ((Number) hourValue.getValue()).longValue();
        long minute = ((Number) minuteValue.getValue()).longValue();
        long second = ((Number) secondValue.getValue()).longValue();
        long milisecond = ((Number) milisecondValue.getValue()).longValue();
        
        /* Carry up */
        if (milisecond >= 1000) { second += milisecond / 1000; milisecond %= 1000; }
        if (second >= 60) { minute += second / 60; second %= 60; }
        if (minute >= 60) { hour += minute / 60; minute %= 60; }
        
        /* Carry down */
        if (milisecond < 0) { milisecond = 1000 - milisecond; second -= milisecond / 1000; milisecond = 1000 - milisecond % 1000; }
        if (second < 0) { second = 60 - second; minute -= second / 60; second = 60 - second % 60; }
        if (minute < 0) { minute = 60 - minute; hour -= minute / 60; minute = 60 - minute % 60; }
        
        int frameNumber = metadata.frameFromTime(hour, minute, second, milisecond, 0);
        
        /* Clamp */
        if (frameNumber >= metadata.frames()) {
            frameNumber = metadata.frames() - 1;
            hour = (long) Math.floor(metadata.hours());
            minute = (long) Math.floor(metadata.minutes());
            second = (long) Math.floor(metadata.seconds());
            milisecond = (long) Math.floor(metadata.miliseconds());
        }
        else if (frameNumber < 0) {
            frameNumber = 0;
            hour = 0;
            minute = 0;
            second = 0;
            milisecond = 0;
        }
        
        /* Time scale */
        hourValue.setModel(new SpinnerNumberModel(hour, null, null, 1));
        minuteValue.setModel(new SpinnerNumberModel(hour == 0 ? minute : minute % 60, null, null, 1));
        secondValue.setModel(new SpinnerNumberModel(minute == 0 ? second : second % 60, null, null, 1));
        milisecondValue.setModel(new SpinnerNumberModel(second == 0 ? milisecond : milisecond % 1000, null, null, 10));
        
        /* Frame selectors */
        frameSlider.setModel(new DefaultBoundedRangeModel(frameNumber, 0, 0, metadata.frames() - 1));
        frameValue.setModel(new SpinnerNumberModel(frameNumber, 0, metadata.frames() - 1, 1));
    }
    // </editor-fold>
    
    /**
     * Update the time scale from frame number.
     */
    // <editor-fold defaultstate="collapsed" desc="Update the time scale from frame number">
    private void updateTimeScale(int frameNumber) {
        /* Clamp */
        if (frameNumber >= metadata.frames()) frameNumber = metadata.frames() - 1;
        else if (frameNumber < 0)                frameNumber = 0;
        
        /* Assign values */
        long hour = (long) Math.floor(metadata.hoursFromFrame(frameNumber));
        long minute = (long) Math.floor(metadata.minutesFromFrame(frameNumber));
        long second = (long) Math.floor(metadata.secondsFromFrame(frameNumber));
        long milisecond = (long) Math.floor(metadata.milisecondsFromFrame(frameNumber));
        
        /* Time scale */
        hourValue.setModel(new SpinnerNumberModel(hour, null, null, 1));
        minuteValue.setModel(new SpinnerNumberModel(hour == 0 ? minute : minute % 60, null, null, 1));
        secondValue.setModel(new SpinnerNumberModel(minute == 0 ? second : second % 60, null, null, 1));
        milisecondValue.setModel(new SpinnerNumberModel(second == 0 ? milisecond : milisecond % 1000, null, null, 10));
        
        /* Frame selectors */
        frameSlider.setModel(new DefaultBoundedRangeModel(frameNumber, 0, 0, metadata.frames() - 1));
        frameValue.setModel(new SpinnerNumberModel(frameNumber, 0, metadata.frames() - 1, 1));
    }
    // </editor-fold>
    
    /**
     * Select sampling total.
     */
    private void selectSamplingTotal() {
        samplingLevelLabel.setEnabled(false);
        samplingLevelValue.setEnabled(false);
    }
    
    /**
     * Select sampling by level.
     */
    private void selectSamplingByLevel() {
        samplingLevelLabel.setEnabled(true);
        samplingLevelValue.setEnabled(true);
    }
    
    /**
     * Set component and all its childrend enabled status.<br>
     * <a href="https://stackoverflow.com/a/13920371">Source.</a>
     * @param component Parent component.
     * @param enabled Enabled status.
     */
    static private void setFullyEnabled(Component component, boolean enabled) {
        component.setEnabled(enabled);
        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                setFullyEnabled(child, enabled);
            }
        }
    }
    
    /**
     * Setup components.
     */
    // <editor-fold defaultstate="collapsed" desc="Setup components">
    private void setupComponents() {
        /* Menu bar */
        /* File menu */
        fileMenu.setActionCommand(fileMenu.getName());
        newFile.setActionCommand(newFile.getName());
        openFile.setActionCommand(openFile.getName());
        save.setActionCommand(save.getName());
        saveAs.setActionCommand(saveAs.getName());
        exportFrameMenu.setActionCommand(exportFrameMenu.getName());
        exportMosaicMenu.setActionCommand(exportMosaicMenu.getName());
        exportPiecesMenu.setActionCommand(exportPiecesMenu.getName());
        close.setActionCommand(close.getName());
        exit.setActionCommand(exit.getName());
        
        /* Help menu */
        helpMenu.setActionCommand(helpMenu.getName());
        about.setActionCommand(about.getName());
        
        /* Tabbed panel */
        /* Frame tab */
        exportFrameButton.setActionCommand(exportFrameButton.getName());
        openVideo.setActionCommand(openVideo.getName());
        
        /* Mosaic tab */
        generate.setActionCommand(generate.getName());
        exportMosaicButton.setActionCommand(exportMosaicButton.getName());
        
        /* Pieces tab */
        exportPiecesButton.setActionCommand(exportPiecesButton.getName());
    }
    // </editor-fold>
    
    /**
     * Set controller object.
     * @param controller Controller object.
     */
    // <editor-fold defaultstate="collapsed" desc="Set controller">
    public void setController(Controller controller)
    {
        /* Window */
        addWindowListener(controller);
        
        /* Menu bar */
        /* File menu */
        fileMenu.addActionListener(controller);
        newFile.addActionListener(controller);
        openFile.addActionListener(controller);
        save.addActionListener(controller);
        saveAs.addActionListener(controller);
        exportFrameMenu.addActionListener(controller);
        exportMosaicMenu.addActionListener(controller);
        exportPiecesMenu.addActionListener(controller);
        close.addActionListener(controller);
        exit.addActionListener(controller);
        
        /* Help menu  */
        helpMenu.addActionListener(controller);
        about.addActionListener(controller);
        
        /* Tabbed panel */
        /* Frame panel */
        openVideo.addActionListener(controller);
        exportFrameButton.addActionListener(controller);
        hourValue.addChangeListener(controller);
        minuteValue.addChangeListener(controller);
        secondValue.addChangeListener(controller);
        milisecondValue.addChangeListener(controller);
        frameValue.addChangeListener(controller);
        frameSlider.addChangeListener(controller);
        
        hourValue.addChangeListener((ChangeEvent e) -> { updateFrameNumber(); });
        minuteValue.addChangeListener((ChangeEvent e) -> { updateFrameNumber(); });
        secondValue.addChangeListener((ChangeEvent e) -> { updateFrameNumber(); });
        milisecondValue.addChangeListener((ChangeEvent e) -> { updateFrameNumber(); });
        frameValue.addChangeListener((ChangeEvent e) -> { updateTimeScale(((Number) frameValue.getValue()).intValue()); });
        frameSlider.addChangeListener((ChangeEvent e) -> { updateTimeScale(frameSlider.getValue()); });
        
        /* Mosaic panel */
        samplingByLevel.addActionListener((ActionEvent e) -> { selectSamplingByLevel(); });
        samplingTotal.addActionListener((ActionEvent e) -> { selectSamplingTotal(); });
        generate.addActionListener(controller);
        exportMosaicButton.addActionListener(controller);
        
        /* Pieces panel */
        exportPiecesButton.addActionListener(controller);
    }
    // </editor-fold>
    
    /**
     * Set component enabled status.
     * @param name Component name.
     * @param enabled Enabled status.
     */
    // <editor-fold defaultstate="collapsed" desc="Set component enabled status">
    public void setComponentEnabled(String name, boolean enabled) {
        /* NULL name */
        if (name == null) {
            System.err.println("Error: empty component name");
            return;
        }
        
        /* Handle name */
        switch (name) {
            /* Menu bar */
            case "menuBar": menuBar.setEnabled(enabled); return;
            
            /* File menu */
            case "fileMenu": fileMenu.setEnabled(enabled); return;
            case "newFile": newFile.setEnabled(enabled); return;
            case "openFile": openFile.setEnabled(enabled); return;
            case "save": save.setEnabled(enabled); return;
            case "saveAs": saveAs.setEnabled(enabled); return;
            case "exportFrameMenu": exportFrameMenu.setEnabled(enabled); return;
            case "exportMosaicMenu": exportMosaicMenu.setEnabled(enabled); return;
            case "exportPiecesMenu": exportPiecesMenu.setEnabled(enabled); return;
            case "close": close.setEnabled(enabled); return;
            case "exit": exit.setEnabled(enabled); return;
            
            /* Help menu */
            case "helpMenu": helpMenu.setEnabled(enabled); return;
            case "about": about.setEnabled(enabled); return;
            
            
            /* Tabbed pane */
            case "tabbedPane": setFullyEnabled(tabbedPane, enabled); return;
            
            /* Frame tab */
            case "frameTab": setFullyEnabled(frameTab, enabled); return;
            case "videoPanel": setFullyEnabled(videoPanel, enabled); return;
            case "openVideo": openVideo.setEnabled(enabled); return;
            case "frameSelectorPanel": setFullyEnabled(frameSelectorPanel, enabled); return;
            case "hourValue": hourValue.setEnabled(enabled); return;
            case "minuteValue": minuteValue.setEnabled(enabled); return;
            case "secondValue": secondValue.setEnabled(enabled); return;
            case "milisecondValue": milisecondValue.setEnabled(enabled); return;
            case "frameValue": frameValue.setEnabled(enabled); return;
            case "frameSlider": frameSlider.setEnabled(enabled); return;
            
            /* Mosaic tab */
            case "mosaicTab": setFullyEnabled(mosaicTab, enabled); return;
            case "mosaicPanel": setFullyEnabled(mosaicPanel, enabled); return;
            case "generate": generate.setEnabled(enabled); return;
            case "exportMosaicButton": exportMosaicButton.setEnabled(enabled); return;
            
            /* Pieces tab */
            case "piecesTab": setFullyEnabled(piecesTab, enabled); return;
            case "piecesPanel": setFullyEnabled(piecesPanel, enabled); return;
            case "exportPiecesButton": exportPiecesButton.setEnabled(enabled); return;
            case "piecesScroll": piecesScroll.setEnabled(enabled); return;
            
            /* Unknow */
            default: System.err.println("Error: unknow component \"" + name + "\"");
        }
    }
    // </editor-fold>
    
    /**
     * Reset all components to default state.
     */
    // <editor-fold defaultstate="collapsed" desc="Reset components">
    public void reset() {
        /* Menu bar */
        save.setEnabled(false);
        saveAs.setEnabled(false);
        exportFrameMenu.setEnabled(false);
        exportMosaicMenu.setEnabled(false);
        exportPiecesMenu.setEnabled(false);
        close.setEnabled(false);
        
        /* Frame tab */
        frame.setImage(null);
        
        /* Video panel */
        metadata = null;
        setFullyEnabled(videoPanel, false);
        videoNameValue.setText("-");
        videoPathValue.setText("-");
        videoSizeValue.setText("-");
        videoFormatValue.setText("-");
        videoWidthValue.setText("-");
        videoHeightValue.setText("-");
        videoLengthValue.setText("-");
        videoFramesValue.setText("-");
        videoFpsValue.setText("-");
        int center = javax.swing.JTextField.CENTER;
        videoNameValue.setHorizontalAlignment(center);
        videoPathValue.setHorizontalAlignment(center);
        videoSizeValue.setHorizontalAlignment(center);
        videoFormatValue.setHorizontalAlignment(center);
        videoWidthValue.setHorizontalAlignment(center);
        videoHeightValue.setHorizontalAlignment(center);
        videoLengthValue.setHorizontalAlignment(center);
        videoFramesValue.setHorizontalAlignment(center);
        videoFpsValue.setHorizontalAlignment(center);
        openVideo.setText("Abrir...");
        openVideo.setEnabled(true);
        
        /* Frame selector panel */
        setFullyEnabled(frameSelectorPanel, false);
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0, null, null, 0);
        hourValue.setModel(spinnerModel);
        minuteValue.setModel(spinnerModel);
        secondValue.setModel(spinnerModel);
        milisecondValue.setModel(spinnerModel);
        frameValue.setModel(spinnerModel);
        frameSlider.setModel(new DefaultBoundedRangeModel());
        
        /* Mosaic tab */
        mosaic.setImage(null);
        setFullyEnabled(mosaicPanel, false);
        divisionsValue.setModel(spinnerModel);
        gapValue.setModel(spinnerModel);
        colorRGB.setSelected(false);
        colorCIELAB.setSelected(false);
        samplingByLevel.setSelected(false);
        samplingTotal.setSelected(false);
        samplingLevelValue.setModel(spinnerModel);
        scaleValue.setModel(spinnerModel);
        mosaicWidthValue.setModel(spinnerModel);
        mosaicHeightValue.setModel(spinnerModel);
        
        /* Pieces tab */
        setFullyEnabled(piecesPanel, false);
        piecesCanvas.removeAll();
        piecesCanvas.setLayout(new GridBagLayout());
    }
    // </editor-fold>
    
    /**
     * Update menu bar and video, frame selector and mosaic panels.
     * @param metadata Video metadata
     */
    // <editor-fold defaultstate="collapsed" desc="Update video metadata">
    public void setVideoMetadata(Metadata metadata) {
        /* Assign new metadata */
        this.metadata = metadata;
        if (metadata == null) {
            reset();
            return;
        }
        
        /* Menu bar */
        save.setEnabled(true);
        saveAs.setEnabled(true);
        exportFrameMenu.setEnabled(true);
        exportMosaicMenu.setEnabled(true);
        exportPiecesMenu.setEnabled(true);
        close.setEnabled(true);
        
        /* Frame tab */
        /* Video panel */
        setFullyEnabled(videoPanel, true);
        int center = javax.swing.JTextField.LEADING;
        String hours = String.format("%02d", (long) Math.floor(metadata.hours()));
        String minutes = String.format("%02d", (long) Math.floor(metadata.minutes()) % 60L);
        String seconds = String.format("%02d", (long) Math.floor(metadata.seconds()) % 60L);
        String miliseconds = String.format("%02d", (long) Math.floor(metadata.miliseconds()) % 1000L);
        
        String size;
        long bytes = this.metadata.bytes();
             if (bytes <       1024) size = bytes + " B";
        else if (bytes <    1048576) size = String.format("%.2f KB", this.metadata.kilobytes());
        else if (bytes < 1073741824) size = String.format("%.2f MB", this.metadata.megabytes());
        else                         size = String.format("%.2f GB", this.metadata.gigabytes());
        
        videoNameValue.setHorizontalAlignment(center);
        videoPathValue.setHorizontalAlignment(center);
        videoSizeValue.setHorizontalAlignment(center);
        videoFormatValue.setHorizontalAlignment(center);
        videoWidthValue.setHorizontalAlignment(center);
        videoHeightValue.setHorizontalAlignment(center);
        videoLengthValue.setHorizontalAlignment(center);
        videoFramesValue.setHorizontalAlignment(center);
        videoFpsValue.setHorizontalAlignment(center);
        videoNameValue.setText(metadata.name());
        videoPathValue.setText(metadata.path());
        videoSizeValue.setText(size);
        videoFormatValue.setText(metadata.formats());
        videoWidthValue.setText(metadata.width() + " px");
        videoHeightValue.setText(metadata.height() + " px");
        videoLengthValue.setText(hours + ":" + minutes + ":" + seconds + "," + miliseconds);
        videoFramesValue.setText(String.valueOf(metadata.frames()));
        videoFpsValue.setText(String.format("%.2f", metadata.fps()) + " FPS");
        openVideo.setText("Cambiar...");
        
        /* Frame selector panel */
        setFullyEnabled(frameSelectorPanel, true);
        exportFrameButton.setEnabled(true);
        hourValue.setEnabled(Math.floor(metadata.hours()) > 0.0);
        minuteValue.setEnabled(Math.floor(metadata.minutes()) > 0);
        secondValue.setEnabled(Math.floor(metadata.seconds()) > 0);
        hourValue.setModel(new SpinnerNumberModel(0, 0, (int) metadata.hours(), 1));
        minuteValue.setModel(new SpinnerNumberModel(0, null, null, 1));
        secondValue.setModel(new SpinnerNumberModel(0, null, null, 1));
        milisecondValue.setModel(new SpinnerNumberModel(0, null, null, 1));
        frameValue.setModel(new SpinnerNumberModel(0.0, 0.0, (double) metadata.frames(), 0.1));
        frameSlider.setModel(new DefaultBoundedRangeModel(0, 0, 0, metadata.frames()));
        
        /* Mosaic tab */
        setFullyEnabled(mosaicPanel, true);
        divisionsValue.setModel(new SpinnerNumberModel(16, 10, null, 1));
        gapValue.setModel(new SpinnerNumberModel(5, 1, null, 1));
        colorRGB.setSelected(true);
        samplingByLevel.setSelected(true);
        samplingLevelValue.setModel(new SpinnerNumberModel(2, 1, null, 1));
        scaleValue.setModel(new SpinnerNumberModel(1.0F, 0.25F, null, 0.01F));
        mosaicWidthValue.setModel(new SpinnerNumberModel(metadata.width(), metadata.width() >> 2, metadata.width() << 4, 1));
        mosaicHeightValue.setModel(new SpinnerNumberModel(metadata.height(), metadata.height() >> 2, metadata.width() << 4, 1));
        exportMosaicButton.setEnabled(false);
        
        /* Pieces tab */
        setFullyEnabled(piecesPanel, false);
        piecesCanvas.removeAll();
        piecesCanvas.setLayout(new GridBagLayout());
    }
    // </editor-fold>
    
    /**
     * Set video frame preview
     * @param newFrame Frame to draw. 
     */
    public void setFrame(BufferedImage newFrame) {
        frame.setImage(newFrame);
    }
    
    /**
     * Set mosaic and update the export option enabled state.
     * @param newMosaic Mosaic to draw.
     * @param pieces Pieces to draw.
     */
    public void setMosaic(BufferedImage newMosaic, BufferedImage[] pieces) {
        mosaic.setImage(newMosaic);
        boolean enabled = mosaic.hasImage();
        
        /* Menu bar */
        exportMosaicMenu.setEnabled(enabled);
        exportPiecesMenu.setEnabled(enabled);
        
        /* Mosaic tab */
        exportMosaicButton.setEnabled(enabled);
        
        /* Pieces tab */
        setFullyEnabled(piecesPanel, enabled);
        piecesCanvas.removeAll();
        
        if (pieces == null) {
            piecesCanvas.setLayout(new GridBagLayout());
        } else {
            GridBagConstraints constraint = new GridBagConstraints();
            constraint.fill = GridBagConstraints.HORIZONTAL;
            constraint.insets = new Insets(0, 0, 10, 10);
            
            float width = (float) (piecesScroll.getWidth() - piecesScroll.getVerticalScrollBar().getWidth() - 40)  / 3.0F;
            float scale = width / (float) pieces[0].getWidth();
            Dimension size = new Dimension((int) width, (int) (pieces[0].getHeight() * scale));
            
            piecesCanvas.setLayout(new GridBagLayout());
            
            for (int i = 0; i < pieces.length; i++) {
                ImagePanel piece = new ImagePanel(pieces[i]);
                piece.setPreferredSize(size);
                piece.setSize(size);
                constraint.gridx = i % 3;
                constraint.gridy = i / 3;
                piecesCanvas.add(piece, constraint);
            }
        }
        
        /* Refresh */
        mosaic.revalidate();
        mosaic.repaint();
    }
    
    /**
     * Get the loaded frame status.
     * @return True if has a loaded frame.
     */
    public boolean hasFrame() {
        return frame.hasImage();
    }
    
    /**
     * Get the loaded mosaic status.
     * @return True if has a loaded mosaic.
     */
    public boolean hasMosaic() {
        return mosaic.hasImage();
    }
    
    /**
     * Get the loaded video status.
     * @return True if has a loaded video.
     */
    public boolean hasVideo() {
        return metadata != null;
    }
    
    /**
     * Get the number of the current selected frame.
     * @return The number of the current selected frame.
     */
    public int getFrameNumber() {
        return frameSlider.getValue();
    }
    
    /**
     * Get the number of mosaic divisions.
     * @return The number of mosaic divisions.
     */
    public int getDivisions() {
        return (Integer) divisionsValue.getValue();
    }
    
    /**
     * Get the gap between frames to sample.
     * @return The gap between frames to sample.
     */
    public int getGap() {
        return (Integer) gapValue.getValue();
    }
    
    /**
     * Get the color space.
     * @return The color space.
     */
    public int getColorSpace() {
        if (colorRGB.isSelected()) return RGB;
        if (colorCIELAB.isSelected()) return CIELAB;
        return RGB;
    }
    
    /**
     * Get the sampling type.
     * @return The sampling type.
     */
    public int getSamplingType() {
        if (samplingTotal.isSelected()) return SAMPLING_TOTAL;
        if (samplingByLevel.isSelected()) return SAMPLING_BY_LEVEL;
        return SAMPLING_TOTAL;
    }
    
    /**
     * Get the sampling level.
     * @return The sampling level.
     */
    public int getSamplingLevel() {
        if (samplingTotal.isSelected()) return 0;
        if (samplingByLevel.isSelected()) return (Integer) samplingLevelValue.getValue();
        return 0;
    }
    
    /**
     * Get the scale of the mosaic.
     * @return The scale of the mosaic.
     */
    public float getScale() {
        return (Float) scaleValue.getValue();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem close;
    private javax.swing.JLabel colon1;
    private javax.swing.JLabel colon2;
    private javax.swing.JLabel colon3;
    private javax.swing.JRadioButton colorCIELAB;
    private javax.swing.JRadioButton colorRGB;
    private javax.swing.ButtonGroup colorSpace;
    private javax.swing.JLabel colorSpaceLabel;
    private javax.swing.JLabel divisionsLabel;
    private javax.swing.JSpinner divisionsValue;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton exportFrameButton;
    private javax.swing.JMenuItem exportFrameMenu;
    private javax.swing.JButton exportMosaicButton;
    private javax.swing.JMenuItem exportMosaicMenu;
    private javax.swing.JButton exportPiecesButton;
    private javax.swing.JMenuItem exportPiecesMenu;
    private javax.swing.JMenu fileMenu;
    private view.ImagePanel frame;
    private javax.swing.JLabel frameLabel;
    private javax.swing.JPanel frameSelectorPanel;
    private javax.swing.JSlider frameSlider;
    private javax.swing.JPanel frameTab;
    private javax.swing.JSpinner frameValue;
    private javax.swing.JLabel gapLabel;
    private javax.swing.JSpinner gapValue;
    private javax.swing.JButton generate;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JSpinner hourValue;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSpinner milisecondValue;
    private javax.swing.JSpinner minuteValue;
    private view.ImagePanel mosaic;
    private javax.swing.JLabel mosaicHeightLabel;
    private javax.swing.JSpinner mosaicHeightValue;
    private javax.swing.JPanel mosaicPanel;
    private javax.swing.JPanel mosaicTab;
    private javax.swing.JLabel mosaicWidthLabel;
    private javax.swing.JSpinner mosaicWidthValue;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JButton openVideo;
    private javax.swing.JPanel piecesCanvas;
    private javax.swing.JLabel piecesLabel;
    private javax.swing.JPanel piecesPanel;
    private javax.swing.JScrollPane piecesScroll;
    private javax.swing.JPanel piecesTab;
    private javax.swing.JTextField piecesValue;
    private javax.swing.JPanel piecesViewport;
    private javax.swing.JRadioButton samplingByLevel;
    private javax.swing.JLabel samplingLevelLabel;
    private javax.swing.JSpinner samplingLevelValue;
    private javax.swing.JRadioButton samplingTotal;
    private javax.swing.ButtonGroup samplingType;
    private javax.swing.JLabel samplingTypeLabel;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JSpinner scaleValue;
    private javax.swing.JSpinner secondValue;
    private javax.swing.JPopupMenu.Separator separator1;
    private javax.swing.JPopupMenu.Separator separator2;
    private javax.swing.JPopupMenu.Separator separator3;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel videoFormatLabel;
    private javax.swing.JTextField videoFormatValue;
    private javax.swing.JLabel videoFpsLabel;
    private javax.swing.JTextField videoFpsValue;
    private javax.swing.JLabel videoFramesLabel;
    private javax.swing.JTextField videoFramesValue;
    private javax.swing.JLabel videoHeightLabel;
    private javax.swing.JTextField videoHeightValue;
    private javax.swing.JLabel videoLengthLabel;
    private javax.swing.JTextField videoLengthValue;
    private javax.swing.JLabel videoNameLabel;
    private javax.swing.JTextField videoNameValue;
    private javax.swing.JPanel videoPanel;
    private javax.swing.JLabel videoPathLabel;
    private javax.swing.JTextField videoPathValue;
    private javax.swing.JLabel videoSizeLabel;
    private javax.swing.JTextField videoSizeValue;
    private javax.swing.JLabel videoWidthLabel;
    private javax.swing.JTextField videoWidthValue;
    // End of variables declaration//GEN-END:variables
}
